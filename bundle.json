{
  "{D35C5E3A-B2F7-4A1F-A97B-5DABE7DED5AF}": {
    "source": "{\n  \"name\": \"mouse\",\n  \"version\": \"0.0.4\",\n  \"description\": \"mouse operation\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"bundle\": \"wes bundle ./src/mouse.cs ./src/compile.js ./usage.js\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/wachaon/mouse.git\"\n  },\n  \"keywords\": [\n    \"wes\",\n    \"mouse\"\n  ],\n  \"author\": \"wachaon@gmail.com\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/wachaon/mouse/issues\"\n  },\n  \"homepage\": \"https://github.com/wachaon/mouse#readme\"\n}",
    "mapping": {},
    "path": "{mouse}/package.json"
  },
  "{C55FF4DB-7B9C-4454-9A14-9BAD761E744A}": {
    "source": "const { readFileSync, existsFileSync } = require('filesystem')\r\nconst { resolve, basename, extname } = require('pathname')\r\nconst { execCommand } = require('utility')\r\nconst ps = require('ps')\r\n\r\n// mouse\r\nconst mouse_cs = generate('src/mouse.cs', 3)\r\nconst mouse_exe = resolve(__dirname, 'mouse.exe')\r\nconst exists_mouse_exe = existsFileSync(mouse_exe)\r\n\r\n// mouse method\r\nfunction pos(x = 0, y = 0) {\r\n    if (exists_mouse_exe) execCommand(`${mouse_exe} pos ${x} ${y}`)\r\n    else ps(mouse_cs, ['pos', x, y])\r\n}\r\n\r\nfunction click() {\r\n    if (exists_mouse_exe) execCommand(`${mouse_exe} click`)\r\n    else ps(mouse_cs, ['click', 0, 0])\r\n}\r\n\r\nfunction leftDown() {\r\n    if (exists_mouse_exe) execCommand(`${mouse_exe} leftDown`)\r\n    else ps(mouse_cs, ['leftDown', 0, 0])\r\n}\r\n\r\nfunction leftUp() {\r\n    if (exists_mouse_exe) execCommand(`${mouse_exe} leftUp`)\r\n    else ps(mouse_cs, ['leftUp', 0, 0])\r\n}\r\n\r\nfunction rightClick() {\r\n    if (exists_mouse_exe) execCommand(`${mouse_exe} rightClick`)\r\n    else ps(mouse_cs, ['rightClick', 0, 0])\r\n}\r\n\r\nfunction rightDown() {\r\n    if (exists_mouse_exe) execCommand(`${mouse_exe} rightDown`)\r\n    else ps(mouse_cs, ['rightDown', 0, 0])\r\n}\r\n\r\nfunction rightUp() {\r\n    if (exists_mouse_exe) execCommand(`${mouse_exe} rightUp`)\r\n    else ps(mouse_cs, ['rightUp', 0, 0])\r\n}\r\n\r\nfunction scroll(movement = 0) {\r\n    if (exists_mouse_exe) execCommand(`${mouse_exe} scroll ${movement}`)\r\n    else ps(mouse_cs, ['scroll', movement, 0])\r\n}\r\n\r\nfunction generate(spec, len = 0) {\r\n    const file = resolve(__dirname, spec)\r\n    const program = basename(file, extname(file))\r\n    const args = len ? (new Array(len)).fill(0).map((arg, i) => `$args[${i}]`).join(', ') : ''\r\n    const source = readFileSync(file, 'auto')\r\n    const code = `$Source = @\"\r\n${source}\"@\r\n\r\nAdd-Type -Language CSharp -TypeDefinition $Source\r\n[${program}]::Main(${args})`\r\n    return code\r\n}\r\n\r\nmodule.exports = {\r\n    pos,\r\n    click,\r\n    leftDown,\r\n    leftUp,\r\n    rightClick,\r\n    rightDown,\r\n    rightUp,\r\n    scroll\r\n}",
    "mapping": {},
    "path": "{mouse}/index.js"
  },
  "{5DE22EEA-85FF-4478-9640-059755FD85DD}": {
    "source": "using System;\r\nusing System.Runtime.InteropServices;\r\n\r\npublic class mouse {\r\n    public static void Main (params string[] args) {\r\n        string method = args[0];\r\n        int posX = args.Length > 1 ? Int32.Parse(args[1]) : 0;\r\n        int posY = args.Length > 2 ? Int32.Parse(args[2]) : 0;\r\n\r\n        int MOUSEEVENTF_LEFTDOWN = 0x0002;\r\n        int MOUSEEVENTF_LEFTUP = 0x0004;\r\n        int MOUSEEVENTF_RIGHTDOWN = 0x0008;\r\n        int MOUSEEVENTF_RIGHTUP = 0x0010;\r\n        int MOUSEEVENTF_MIDDLEDOWN = 0x0020;\r\n        int MOUSEEVENTF_MIDDLEUP = 0x0040;\r\n        int MOUSEEVENTF_WHEEL = 0x0800;\r\n\r\n        if (method == \"pos\") { SetCursorPos(posX, posY); }\r\n\r\n        if (method == \"click\" || method == \"leftDown\") { mouse_event(MOUSEEVENTF_LEFTDOWN, 0, 0, 0, 0); }\r\n        if (method == \"click\" || method == \"leftUp\"  ) { mouse_event(MOUSEEVENTF_LEFTUP, 0, 0, 0, 0); }\r\n\r\n        if (method == \"rightClick\" || method == \"rightDown\") { mouse_event(MOUSEEVENTF_RIGHTDOWN, 0, 0, 0, 0); }\r\n        if (method == \"rightClick\" || method == \"rightUp\"  ) { mouse_event(MOUSEEVENTF_RIGHTUP, 0, 0, 0, 0); }\r\n\r\n        if (method == \"middleClick\" || method == \"middleDown\") { mouse_event(MOUSEEVENTF_MIDDLEDOWN, 0, 0, 0, 0); }\r\n        if (method == \"middleClick\" || method == \"middleUp\"  ) { mouse_event(MOUSEEVENTF_MIDDLEUP, 0, 0, 0, 0); }\r\n\r\n        if (method == \"scroll\") { mouse_event(MOUSEEVENTF_WHEEL,0,0,posX,0); }\r\n    }\r\n\r\n    [DllImport(\"user32.dll\")]\r\n    public static extern void SetCursorPos(int X, int Y);\r\n\r\n    [DllImport(\"user32.dll\")]\r\n    public static extern void mouse_event(int dwFlags, int dx, int dy, int cButtons, int dwExtraInfo);\r\n}\r\n",
    "mapping": {},
    "path": "{mouse}/src/mouse.cs"
  },
  "{733D8B44-A1CD-4D87-83D0-BC51F510A10F}": {
    "source": "const WShell = require('WScript.Shell')\r\n\r\nconst { resolve, basename, extname, toWin32Sep } = require('pathname')\r\nconst { existsFileSync } = require('filesystem')\r\nconst { execCommand } = require('utility')\r\nconst isCLI = require('isCLI')\r\nconst { unnamed } = require('argv')\r\n\r\nlet pkg = __dirname\r\nwhile (true) {\r\n    if (existsFileSync(resolve(pkg, 'package.json'))) break\r\n    if (pkg === process.cwd()) break\r\n    pkg = resolve(pkg, '..')\r\n}\r\n\r\nif (isCLI(__filename)) {\r\n    const spec = unnamed.slice(1)\r\n    if (!spec.length) throw new Error('You must specify a file to compile')\r\n    compile(...spec)\r\n} else module.exports = compile\r\n\r\nfunction compile(...specs) {\r\n    const files = specs.map(spec => {\r\n        const _spec = resolve(pkg, spec)\r\n        const filename = basename(spec, extname(spec))\r\n        return {\r\n            output: resolve(pkg, filename + '.exe'),\r\n            input: toWin32Sep(_spec)\r\n        }\r\n    })\r\n\r\n    const versions = [\r\n        \"v4.0.30319\",\r\n        \"V3.5\",\r\n        \"V3.0\",\r\n        \"v2.0.50727\",\r\n        \"v1.1.4322\",\r\n        \"v1.0.3705\"\r\n    ]\r\n\r\n    const compiler = versions\r\n        .map(version => {\r\n            return toWin32Sep(\r\n                resolve(\r\n                    WShell.ExpandEnvironmentStrings(\"%SystemRoot%\"),\r\n                    \"Microsoft.NET/Framework\",\r\n                    version,\r\n                    \"csc.exe\"\r\n                )\r\n            )\r\n        })\r\n        .find(exe => existsFileSync(exe))\r\n\r\n    files.forEach(file => {\r\n        const command = `${compiler} /target:exe /out:${file.output} ${file.input}`\r\n        console.log(execCommand(command))\r\n    })\r\n}\r\n",
    "mapping": {},
    "path": "{mouse}/src/compile.js"
  },
  "{065F9CBE-9119-495B-892B-F968F1EFA336}": {
    "source": "const { pos, click, scroll } = require('./index')\r\n\r\npos(350, 100)\r\nclick()\r\nscroll(-200)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconsole.log('finish!')",
    "mapping": {},
    "path": "{mouse}/usage.js"
  }
}